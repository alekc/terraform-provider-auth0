name: Build
on:
  pull_request:
  repository_dispatch:
    types: [ ok-to-test-command ]
  push:
    branches: ['*']
    paths-ignore:
      - '**.md'
      - 'example/**'
      - 'website/**'
jobs:

  build:
    name: Build Trusted
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:

    - name: Check out source
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
      id: go

    - name: Set up Git cookies
      run: bash scripts/gogetcookie.sh

    - name: Build
      run: make build

    - name: Clean testing env
      run: make sweep
      env:
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

    - name: Test
      run: make testacc OPTS=-coverprofile=c.out
      env:
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

#  debug-ok-to-test:
#    name: debug
#    runs-on: ubuntu-latest
#    env:
#      event_name: ${{ github.event_name }}
#      event_sha: ${{ github.event.client_payload.slash_command.sha }}
#      event_pr_sha: ${{ github.event.client_payload.pull_request.head.sha }}
#      event_slash_sha: ${{ github.event.client_payload.slash_command.sha }}
#    steps:
#      - name: Dump context
#        uses: crazy-max/ghaction-dump-context@v1

  build-fork:
    name: Build from fork
    runs-on: ubuntu-latest
    if:
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    steps:

      - name: Fork based /ok-to-test checkout
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
        id: go

      - name: Set up Git cookies
        run: bash scripts/gogetcookie.sh

      - name: Build
        run: make build

      - name: Clean testing env
        run: make sweep
        env:
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

      - name: Test
        run: make testacc OPTS=-coverprofile=c.out
        env:
          AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

      # Update check run called "integration-fork"
      # affected by https://github.com/imjohnbo/ok-to-test/issues/14
      - uses: actions/github-script@v5
        id: update-check-run
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
